package com.example.swordoffer;

/**
 * @description: 剪绳子
 * 给你一根长度为n的绳子，请把绳子剪成m段（m、n都是整数，n>1并且m>1），每段绳子的长度记为k[0],k[1],...,k[m]。请问k[0]xk[1]x...xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
 * 输入描述:
 * 输入一个数n，意义见题面。（2 <= n <= 60）
 * 输出描述:
 * 输出答案。
 * @author: icecrea
 * @create: 2019-11-07
 **/
public class Sword67_CutRope {

    /**
     * 先举几个例子，可以看出规律来。
     * 4 ： 2*2
     * 5 ： 2*3
     * 6 ： 3*3
     * 7 ： 2*2*3 或者4*3
     * 8 ： 2*3*3
     * 9 ： 3*3*3
     * 10：2*2*3*3 或者4*3*3
     * 11：2*3*3*3
     * 12：3*3*3*3
     * 13：2*2*3*3*3 或者4*3*3*3
     * <p>
     * 下面是分析：
     * 首先判断k[0]到k[m]可能有哪些数字，实际上只可能是2或者3。
     * 当然也可能有4，但是4=2*2，我们就简单些不考虑了。
     * 5<2*3,6<3*3,比6更大的数字我们就更不用考虑了，肯定要继续分。
     * 其次看2和3的数量，2的数量肯定小于3个，为什么呢？因为2+2+2<=3+3，2*2*2<3*3那么题目就简单了。
     * 直接用n除以3，根据得到的余数判断是一个2还是两个2还是没有2就行了。
     * 由于题目规定m>1，所以2只能是1*1，3只能是2*1，这两个特殊情况直接返回就行了。
     *
     * @param n
     * @return
     */
    public int cutRopeMath(int n) {
        if (n == 2) {
            return 1;
        }
        if (n == 3) {
            return 2;
        }
        int x = n % 3;
        int y = n / 3;
        if (x == 0) {
            return (int) Math.pow(3, x);
        } else if (x == 1) {
            return 2 * 2 * (int) Math.pow(3, y - 1);
        } else {
            return 2 * (int) Math.pow(3, y);
        }
    }


    public int cutRope(int n) {
        // n<=3的情况，m>1必须要分段，所以特殊处理。例如：3必须分成1、2；1、1、1 ，n=3最大分段乘积是2,
        if (n == 2) {
            return 1;
        }
        if (n == 3) {
            return 2;
        }
        int[] dp = new int[n + 1];
        //下面3行是n>=4的情况，跟n<=3不同，4可以分很多段，比如分成1、3，
        //这里的3可以不需要再分了，因为3分段最大才2，不分就是3。记录最大的。
        dp[1] = 1;
        dp[2] = 2;
        dp[3] = 3;
        int res = 0;
        //记录最大的
        for (int i = 4; i <= n; i++) {
            for (int j = 1; j <= i / 2; j++) {
                res = Math.max(res, dp[j] * dp[i - j]);
            }
            dp[i] = res;
        }
        return dp[n];
    }
}
